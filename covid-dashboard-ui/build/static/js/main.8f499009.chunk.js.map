{"version":3,"sources":["dispatcher/dispatcher.jsx","actions/action.jsx","views/regionSelect.jsx","views/chips.jsx","stores/store.jsx","views/regionChip.jsx","views/recordTable.jsx","views/records.jsx","views/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Dispatcher","parseRecords","response","user_records","map","res","id","country","total","confirmed","active","deaths","recovered","RegionSelect","props","state","options","onRegionSelect","bind","fetch","then","json","setState","catch","err","alert","event","value","region","dispatch","type","method","headers","body","JSON","stringify","records","Autocomplete","this","onChange","getOptionLabel","option","name","style","width","renderInput","params","TextField","label","variant","React","Component","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","padding","spacing","chip","margin","ChipsArray","regions","console","log","classes","useState","chips","chipData","setChipData","handleDelete","regionToDelete","chipToDelete","filter","Paper","className","data","Chip","key","icon","onDelete","undefined","store","selectedRegions","action","addNewRegion","emit","showRecords","removeChip","push","EventEmitter","register","handleAction","RegionChip","Store","getSelectedRegions","on","addRegion","removeListener","columns","minWidth","container","maxHeight","StickyHeadTable","page","rowsPerPage","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","align","TableBody","rows","slice","row","hover","role","tabIndex","format","Records","getRecords","JustifyContent","Container","maxWidth","Box","m","p","bgcolor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8f499009.chunk.js","sourcesContent":["import {Dispatcher} from \"flux\";\n\nexport default new Dispatcher();","import Dispatcher from \"../dispatcher/dispatcher\";\n\n\nfunction parseRecords(response) {\n    // const records = [];\n    const records = response.user_records.map(res => {\n        return {id: res.id, country: res.country, total: res.confirmed, active: res.active, deaths: res.deaths, recovered: res.recovered};\n        // records.push(record);\n    });\n    return records;\n}\n\nexport function addRegion(region) {\n    Dispatcher.dispatch({\n        region: region,\n        type: 'addRegion'\n    })\n\n    const promise = fetch('http://192.168.0.14:5000/record', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(region)\n    });\n    promise.then(response => response.json()).then(response => {\n        Dispatcher.dispatch({\n            records: parseRecords(response),\n            type: 'showRecords'\n        })\n    }).catch(err => {\n        alert('no data found');\n    });\n    \n}\n\nexport function showRecords() {\n    const promise = fetch('http://192.168.0.14:5000/user-records');\n    promise.then(response => response.json()).then(response => {\n        Dispatcher.dispatch({\n            records: parseRecords(response),\n            type: 'showRecords'\n        })\n    }).catch(err => {\n        alert('no data found');\n    });\n}\n\nexport function deleteRegion(region) {\n    const promise = fetch('http://192.168.0.14:5000/remove-record', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(region)\n    });\n    promise.then(response => response.json()).then(response => {\n        Dispatcher.dispatch({\n            records: parseRecords(response),\n            type: 'showRecords'\n        })\n    }).catch(err => {\n        alert('no data found');\n    });\n}\n\nexport function removeChip(chipToDelete) {\n    Dispatcher.dispatch({\n        chipToDelete: chipToDelete,\n        type: 'removeChip'\n    })\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport * as Actions from \"../actions/action\";\n\nexport default class RegionSelect extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: [],\n        }\n        this.onRegionSelect = this.onRegionSelect.bind(this);\n    }\n\n    componentWillMount() {\n        const promise = fetch('http://192.168.0.14:5000/countries');\n        promise.then(response => response.json()).then(response => {\n            this.setState({\n                options: response['countries']\n            })\n        }).catch(err => {\n            alert('no data found');\n        });\n    }\n\n    onRegionSelect(event, value) {\n        if (value)\n            Actions.addRegion(value);\n    }\n\n    render() {\n        return (\n            <Autocomplete\n            id=\"combo-box-demo\"\n            options={this.state.options}\n            onChange={this.onRegionSelect}\n            getOptionLabel={option => option.name}\n            style={{ width: 300 }}\n            renderInput={params => <TextField {...params} label=\"Select Region\" variant=\"outlined\" />}\n            />\n        )\n    }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport * as Actions from \"../actions/action\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    padding: theme.spacing(0.5),\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nexport default function ChipsArray(regions) {\n\n  console.log(regions);\n\n  const classes = useStyles();\n  const [chipData, setChipData] = React.useState(regions.chips);\n\n  const handleDelete = regionToDelete => () => {\n    Actions.deleteRegion(regionToDelete);\n    Actions.removeChip(regionToDelete);\n    setChipData(chips => chips.filter(chip => chip.id !== regionToDelete.id));\n  };\n\n  return (\n    <Paper className={classes.root}>\n      {chipData.map(data => {\n        let icon;\n\n        return (\n          <Chip\n            key={data.id}\n            icon={icon}\n            label={data.name}\n            onDelete={data.name === 'Global' ? undefined : handleDelete(data)}\n            className={classes.chip}\n          />\n        );\n      })}\n    </Paper>\n  );\n}","import Dispatcher from \"../dispatcher/dispatcher\";\nimport {EventEmitter} from \"events\";\n\nclass Store extends EventEmitter {\n\n    constructor() {\n        super();\n        this.records = [];\n        this.selectedRegions = [{id: 0, name: 'Global'}];\n    }\n\n    handleAction(action) {\n        switch(action.type) {\n            case 'addRegion':\n                this.addNewRegion(action.region);\n                this.emit('region-added');\n                break;\n            case 'showRecords':\n                this.showRecords(action.records);\n                this.emit('show-records');\n                break;\n            case 'removeChip':\n                this.removeChip(action.chipToDelete);\n                this.emit('chip-deleted');\n                break;\n        }\n    }\n\n    removeChip(chipToDelete) {\n        this.selectedRegions = this.selectedRegions.filter(chip => chip.name !== chipToDelete.name);\n    }\n\n    showRecords(records) {\n        this.records = records;\n    }\n\n    addNewRegion(region) {\n        this.selectedRegions.push(region);\n    }\n\n    getSelectedRegions() {\n        return this.selectedRegions\n    }\n\n    getRecords() {\n        return this.records;\n    }\n\n}\n\nconst store = new Store();\nDispatcher.register(store.handleAction.bind(store));\nexport default store;","import React from 'react';\nimport ChipsArray from './chips';\nimport Store from '../stores/store';\n\nexport default class RegionChip extends React.Component {\n\n    constructor() {\n        super();\n        this.state  = {\n            selectedRegions: Store.getSelectedRegions()\n        }\n    }\n    \n    componentDidMount() {\n        Store.on('region-added', this.addRegion.bind(this));\n        Store.on('chip-deleted', this.removeChip.bind(this));\n    }\n\n    componentWillUnmount() {\n        Store.removeListener('region-added', this.addRegion.bind(this));\n        Store.removeListener('chip-deleted', this.removeChip.bind(this));\n    }\n    \n    removeChip() {\n        this.setState({\n            selectedRegions: Store.getSelectedRegions()\n        })\n    }\n\n    addRegion() {\n        this.setState({\n            selectedRegions: Store.getSelectedRegions()\n        })\n    }\n\n    render() {\n        return (\n            <ChipsArray chips={this.state.selectedRegions} />\n        )\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n// function countryToFlag(isoCode) {\n//   return typeof String.fromCodePoint !== 'undefined'\n//     ? isoCode.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397))\n//     : isoCode;\n// }\n\n\nconst columns = [\n  { id: 'country', label: 'Country', minWidth: '20%' },\n  { id: 'total', label: 'Total', minWidth: '20%' },\n  {\n    id: 'active',\n    label: 'Active',\n    minWidth: '20%',\n  },\n  {\n    id: 'deaths',\n    label: 'Deaths',\n    minWidth: '20%',\n  },\n  {\n    id: 'recovered',\n    label: 'Recovered',\n    minWidth: '20%',\n  },\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\nexport default function StickyHeadTable(props) {\n  const classes = useStyles();\n  const [page] = React.useState(0);\n  const [rowsPerPage] = React.useState(10);\n\n  // const handleChangePage = (event, newPage) => {\n  //   setPage(newPage);\n  // };\n\n  // const handleChangeRowsPerPage = event => {\n  //   setRowsPerPage(+event.target.value);\n  //   setPage(0);\n  // };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\n                  {columns.map(column => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}","import React from 'react';\nimport RecordsTable from './recordTable';\nimport Store from '../stores/store';\nimport * as Actions from \"../actions/action\";\n\nexport default class Records extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state  = {\n            records: Store.getRecords()\n        }\n    }\n\n    UNSAFE_componentWillMount() {\n        Actions.showRecords();\n        this.showRecords();\n    }\n\n    componentDidMount() {\n        Store.on('show-records', this.showRecords.bind(this));\n    }\n\n    componentWillUnmount() {\n        Store.removeListener('show-records', this.showRecords.bind(this));\n    }\n\n    showRecords() {\n        this.setState({\n            records: Store.getRecords()\n        })\n    }\n\n    render() {\n        return (\n            <RecordsTable rows={this.state.records}/>\n        )\n    }\n}\n","import React from 'react';\nimport RegionSelect from './regionSelect';\nimport RegionChip from './regionChip';\nimport Records from './records';\nimport Box from '@material-ui/core/Box';\nimport Container from \"@material-ui/core/Container\";\n\nexport default function JustifyContent() {\n  return (\n    <Container maxWidth=\"md\">\n      <div style={{ width: '100%' }}>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\n          <Box p={1} bgcolor=\"grey.300\">\n              <RegionSelect/>\n          </Box>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\n          <Box p={1} bgcolor=\"grey.300\">\n            <RegionChip/>\n          </Box>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\n          <Box p={1} bgcolor=\"grey.300\">\n              <Records/>\n          </Box>\n        </Box>\n      </div>\n    </Container>\n    );\n  }","import React from 'react';\nimport './App.css';\n\nimport Main from './views/main'\n\n\nfunction App() {\n  return (\n    <div className=\"main\">\n    <Main/>\n</div> \n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}